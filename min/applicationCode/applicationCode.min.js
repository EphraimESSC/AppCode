var clientList=[{name:"Paul",age:"20",dateHourOfBirth:"2003-04-16T13:59",sex:"male",address:"Lisbon,\nPortugal",phone:"+493 3 345 44",email:"Paul@xyz.com",diagnoseDetais:[{diagnoseName:"Test Diagnosis 1 1",clientId:"1",date:"today"},{diagnoseName:"Test Diagnosis 2 1",clientId:"1",date:"yesterday"}]},{name:"Paul Abdul",age:"60",dateHourOfBirth:"1943-04-26T13:59",sex:"male",address:"Lisbon",phone:"+493 5363543 345 44",email:"PaulAbdul@xyz.com",diagnoseDetais:[{diagnoseName:"Test Diagnosis 1 2",clientId:"2",date:"today"},{diagnoseName:"Test Diagnosis 2 2",clientId:"2",date:"yesterday"}]},{name:"Matilda",age:"45",dateHourOfBirth:"1974-04-05T13:59",sex:"female",address:"Lisbon",phone:"+493 94932 345 44",email:"Matilda@xyz.com",diagnoseDetais:[{diagnoseName:"Test Diagnosis 1 3",clientId:"3",date:"today"},{diagnoseName:"Test Diagnosis 2 3",clientId:"3",date:"yesterday"}]}];var DataModule=function(e,f){var o={initialize:B,createAllTables:d,dropAllTables:p,getClientList:l,getColumnData:q,insertClientData:y,updateClientData:a,insertDiagnoseData:h,insertTestData:r,getDiagnoseList:g,deleteDiagnoseData:u,clearTable:n,getData:k,updateData:m,executeQuery:v,execute:t,executeAll:j,executeQuery:v,CLASSIFICATION:"classification"};var z=null,w={createClientTable:"CREATE TABLE IF NOT EXISTS CLIENT_DATA (id INTEGER PRIMARY KEY, name, age, dateHourOfBirth, sex, address, phone, email)",insertClientData:"INSERT INTO CLIENT_DATA (name, age, dateHourOfBirth, sex, address, phone, email)  VALUES (?, ?, ?, ?, ?, ?, ?)",dropClientTable:"DROP TABLE CLIENT_DATA",createDiagnoseTable:"CREATE TABLE IF NOT EXISTS DIAGNOSE_DATA (id INTEGER PRIMARY KEY, diagnoseId INTEGER, controlId, controlLabel, controlType, controlValue, classification)",insertDiagnoseData:"INSERT INTO DIAGNOSE_DATA (diagnoseId, controlId, controlLabel, controlType, controlValue)  VALUES (?, ?, ?, ?, ?)",createClassificationTable:"CREATE TABLE IF NOT EXISTS CLASSIFICATION_DATA (id INTEGER PRIMARY KEY, classificationName)",insertClassificationData:"INSERT INTO CLASSIFICATION_DATA (classificationName) VALUES (?)",createDiagnoseControlsTable:"CREATE TABLE IF NOT EXISTS DIAGNOSE_CONTROLS_DATA  (id INTEGER PRIMARY KEY, diagnoseName, diagnoseControlFile, diagnoseControlFileContent)",insertDiagnoseControsData:"INSERT INTO DIAGNOSE_CONTROLS_DATA (diagnoseName, diagnoseControlFile, diagnoseControlFileContent)VALUES (?, ?, ?)"};function B(){z=openDatabase("DataDB","1.0","Data DB",2*1024*1024,function(C){},function(C){alert("Error: DB creation : "+C.message)})}var A={clientData:{tableName:"CLIENT_DATA",queries:{createTable:"CREATE TABLE IF NOT EXISTS CLIENT_DATA (id INTEGER PRIMARY KEY, name, age, dateHourOfBirth, sex, address, phone, email)",selectData:"SELECT * FROM CLIENT_DATA",selectDataWhere:"SELECT * FROM CLIENT_DATA WHERE id=?",insertData:"INSERT INTO CLIENT_DATA (name, age, dateHourOfBirth, sex, address, phone, email) VALUES (?, ?, ?, ?, ?, ?, ?)",deleteData:"DELETE FROM CLIENT_DATA WHERE id=?",dropTable:"DROP TABLE CLIENT_DATA"}},clientDiagnoseData:{tableName:"CLIENT_DIAGNOSE_DATA",columnMapping:{id:"uniqueId","Client ID":"clientId"},queries:{createTable:"CREATE TABLE IF NOT EXISTS CLIENT_DIAGNOSE_DATA (id INTEGER PRIMARY KEY, clientId INTEGER, diagnoseIdForClient, diagnoseName, date)",selectData:"SELECT * FROM CLIENT_DIAGNOSE_DATA",selectDataWhere:"SELECT * FROM CLIENT_DIAGNOSE_DATA WHERE clientId=?",selectDataWhereId:"SELECT * FROM CLIENT_DIAGNOSE_DATA WHERE id=?",insertData:"INSERT INTO CLIENT_DIAGNOSE_DATA (clientId, diagnoseIdForClient, diagnoseName, date) VALUES (?, ?, ?, ?)",getCountWhere:"SELECT COUNT(1) FROM CLIENT_DIAGNOSE_DATA WHERE clientId=?",deleteData:"DELETE FROM CLIENT_DIAGNOSE_DATA WHERE id=?",dropTable:"DROP TABLE CLIENT_DIAGNOSE_DATA"}},diagnoseData:{tableName:"DIAGNOSE_DATA",queries:{createTable:"CREATE TABLE IF NOT EXISTS DIAGNOSE_DATA (id INTEGER PRIMARY KEY, diagnoseId INTEGER, controlId, controlLabel, controlType, controlValueLabel, controlValue, classification)",selectData:"SELECT * FROM DIAGNOSE_DATA",selectDataWhere:"SELECT * FROM DIAGNOSE_DATA WHERE diagnoseId=?",insertData:"INSERT INTO DIAGNOSE_DATA (diagnoseId, controlId, controlLabel, controlType, controlValueLabel, controlValue) VALUES (?, ?, ?, ?, ?, ?)",deleteData:"DELETE FROM DIAGNOSE_DATA WHERE diagnoseId=?",deleteDataWhere:"DELETE FROM DIAGNOSE_DATA WHERE controlId=(?||'%')",dropTable:"DROP TABLE DIAGNOSE_DATA"}},classification:{tableName:"CLASSIFICATION_DATA",queries:{createTable:"CREATE TABLE IF NOT EXISTS CLASSIFICATION_DATA (id INTEGER PRIMARY KEY, classificationName, parentClassificationId INTEGER)",selectData:"SELECT id classificationId, classificationName, parentClassificationId FROM CLASSIFICATION_DATA",insertData:" INSERT INTO CLASSIFICATION_DATA (classificationName, parentClassificationId) VALUES (?, ?) ",deleteData:"DELETE FROM CLASSIFICATION_DATA WHERE id=?",dropTable:"DROP TABLE CLASSIFICATION_DATA"}},diagnoseClassification:{tableName:"DIAGNOSE_CLASSIFICATION",queries:{createTable:"CREATE TABLE IF NOT EXISTS DIAGNOSE_CLASSIFICATION (id INTEGER PRIMARY KEY, diagnoseItemId INTEGER, classificationId INTEGER)",selectData:"SELECT * FROM DIAGNOSE_CLASSIFICATION",selectDataWhere:"SELECT * FROM DIAGNOSE_CLASSIFICATION WHERE diagnoseItemId=? order by classificationId",getCountWhere:"SELECT COUNT(1) FROM DIAGNOSE_CLASSIFICATION WHERE diagnoseItemId=?",insertData:"INSERT INTO DIAGNOSE_CLASSIFICATION (diagnoseItemId, classificationId) VALUES (?, ?)",deleteData:"DELETE FROM DIAGNOSE_CLASSIFICATION WHERE id=?",deleteDataWhere:"DELETE FROM DIAGNOSE_CLASSIFICATION WHERE diagnoseItemId=?",dropTable:"DROP TABLE DIAGNOSE_CLASSIFICATION"}},diagnoseControls:{tableName:"DIAGNOSE_CONTROLS_DATA",queries:{createTable:"CREATE TABLE IF NOT EXISTS DIAGNOSE_CONTROLS_DATA (id INTEGER PRIMARY KEY, tabIndex INTEGER, subTabIndex INTEGER, diagnoseName, subTabName, diagnoseControlFile, diagnoseControlFileContent, classify)",selectData:"SELECT * FROM DIAGNOSE_CONTROLS_DATA",selectDataWhere:"SELECT * FROM DIAGNOSE_CONTROLS_DATA WHERE tabIndex=?",insertData:" INSERT INTO DIAGNOSE_CONTROLS_DATA (tabIndex, subTabIndex, diagnoseName, subTabName, diagnoseControlFile, diagnoseControlFileContent, classify) VALUES (?, ?, ?, ?, ?, ?, ?) ",updateData:"UPDATE DIAGNOSE_CONTROLS_DATA set diagnoseName=?, subTabName=?, classify=? where id=?",updateFileData:"UPDATE DIAGNOSE_CONTROLS_DATA set tabIndex=?, subTabIndex=?, diagnoseName=?, subTabName=?, diagnoseControlFile=?, diagnoseControlFileContent=?, classify=? where id=?",dropTable:"DROP TABLE DIAGNOSE_CONTROLS_DATA"}},clientAppointmentsData:{tableName:"CLIENT_APPOINTMENTS_DATA",queries:{createTable:"CREATE TABLE IF NOT EXISTS CLIENT_APPOINTMENTS_DATA (id INTEGER PRIMARY KEY, clientId, date, attended)",selectData:"SELECT * FROM CLIENT_APPOINTMENTS_DATA",selectDataWhere:"SELECT * FROM CLIENT_APPOINTMENTS_DATA WHERE CLIENTID=?",insertData:"INSERT INTO CLIENT_APPOINTMENTS_DATA (clientId, date, attended) VALUES (?, ?, ?)",updateData:"UPDATE CLIENT_APPOINTMENTS_DATA set attended=? where id=?",dropTable:"DROP TABLE CLIENT_APPOINTMENTS_DATA"}}};var b={clientAppointmentsData:{tableName:"CLIENT_APPOINTMENTS_DATA",createTable:{type:"createTable","default":"CREATE TABLE IF NOT EXISTS CLIENT_APPOINTMENTS_DATA (id INTEGER PRIMARY KEY, clientId, date, attended)"},select:{type:"createTable","default":"SELECT * FROM CLIENT_APPOINTMENTS_DATA",all_where_clientid:"SELECT * FROM CLIENT_APPOINTMENTS_DATA WHERE CLIENTID=?"},insert:{type:"insert","default":"INSERT INTO CLIENT_APPOINTMENTS_DATA (clientId, date, attended) VALUES (?, ?, ?)"},update:{type:"update",attended:"UPDATE CLIENT_APPOINTMENTS_DATA set attended=? where id=?"}}};function k(D,C,E){if(C===f){C=[]}z.transaction(function(F){F.executeSql(x(D,"selectData"),[],function(J,I){var H=[];for(var G=0;G<I.rows.length;G++){H[G]=I.rows.item(G)}E.apply(this,[H])},function(G,H){alert("Error:"+H.message)})})}function t(F,E,D,G,C){if(D===f){D=[]}z.transaction(function(H){var I=x(F,E);H.executeSql(I,D,function(N,M){var L=[];for(var K=0;K<M.rows.length;K++){L[K]=M.rows.item(K)}var J={};if(M.rowsAffected>0&&C!=="delete"&&C!="update"){J.insertId=M.insertId}if(L.length>0){J.rows=L}if(G!==f){G.apply(this,[J])}},function(J,K){alert("Error:"+K.message)})})}function v(D){var G=D.tableReference,E=D.queryReference,H=D.queryParametersArray,I=D.callback,C=D.queryType;var F=[];z.transaction(function(J){for(i=0;i<H.length;i++){J.executeSql(A[G][E],H[i],function(N,M){var L=[];for(var K=0;K<M.rows.length;K++){L[K]=M.rows.item(K)}if(M.rowsAffected>0&&C!=="delete"){F.push(M.insertId)}if(L.length>0){results.rows=L}if(I!==f){I.apply(this,[F])}},function(K,L){alert("Error:"+L.message)})}},function(){},function(){})}function j(D){var G=D.tableReference,E=D.queryReference,H=D.queryParametersArray,I=D.callback,C=D.queryType;var F=[];z.transaction(function(J){for(i=0;i<H.length;i++){J.executeSql(x(G,E),H[i],function(M,L){var K=[];if(L.rowsAffected>0&&C!=="delete"){F.push(L.insertId)}if(I!==f){I.apply(this,[F])}},function(K,L){alert("Error:"+L.message)})}},function(){},function(){})}function v(D,C,E){C=C||[];z.transaction(function(F){F.executeSql(D,C,function(H,G){if(E!==f){E.apply(this,[])}},function(G,H){alert("Error:"+H.message)})})}function s(C){return A[C].tableName}function x(C,D){return A[C].queries[D]}function d(C){z.transaction(function(D){D.executeSql(x("clientData","createTable"),[],function(){if(C===f){return}C.apply(this,["Client Table created"])});D.executeSql(x("clientDiagnoseData","createTable"),[],function(){if(C===f){return}C.apply(this,["Client Diagnose Data Table created"])});D.executeSql(x("diagnoseData","createTable"),[],function(){if(C===f){return}C.apply(this,["Diagnose data Table created"])});D.executeSql(x("classification","createTable"),[],function(){if(C===f){return}C.apply(this,["Classification Table created"])});D.executeSql(x("diagnoseClassification","createTable"),[],function(){if(C===f){return}C.apply(this,["Diagnose Classification Data Table created"])});D.executeSql(x("diagnoseControls","createTable"),[],function(){if(C===f){return}C.apply(this,["Diagnose Controls Table created"])});D.executeSql(x("clientAppointmentsData","createTable"),[],function(){if(C===f){return}C.apply(this,["Client Appointments Data Table created"])})})}function p(){z.transaction(function(C){C.executeSql(x("clientData","dropTable"),[],function(){});C.executeSql(x("clientDiagnoseData","dropTable"),[],function(){});C.executeSql(x("diagnoseData","dropTable"),[],function(){});C.executeSql(x("classification","dropTable"),[],function(){});C.executeSql(x("diagnoseControls","dropTable"),[],function(){});C.executeSql(x("diagnoseClassification","dropTable"),[],function(){});C.executeSql(x("clientAppointmentsData","dropTable"),[],function(){})})}function n(C,D){z.transaction(function(E){E.executeSql("DELETE FROM "+C,[],function(){if(D===f){return}D.apply(this,["Table cleared"])})})}function l(){z.transaction(function(C){C.executeSql("SELECT * FROM CLIENT_DATA WHERE name like '%' || ? || '%'",["Paul"],function(G,F){var E=[];for(var D=0;D<F.rows.length;D++){E[D]=F.rows.item(D)}},function(D,E){alert("Error:"+E.message)})})}function u(C,E){var D="DIAGNOSE_DATA";z.transaction(function(F){F.executeSql("DELETE FROM "+D+" WHERE diagnoseId=?",[C],function(){if(E===f){return}E.apply(this,["Table cleared"])})})}function g(C,D){z.transaction(function(E){E.executeSql("SELECT * FROM DIAGNOSE_DATA WHERE diagnoseId=?",[C],function(I,H){var G=[];for(var F=0;F<H.rows.length;F++){G[F]=H.rows.item(F)}D.apply(this,[G])},function(F,G){alert("Error:"+G.message)})})}function q(E,C,F){var D=[];z.transaction(function(H){var I=null;var G=[];if(C===f||C===null||C===""){I="SELECT "+E.join(", ")+" FROM CLIENT_DATA"}else{I="SELECT "+E.join(", ")+" FROM CLIENT_DATA WHERE name like '%' || ? || '%'";G=[C]}H.executeSql(I,G,function(M,L){var K=[];for(var J=0;J<L.rows.length;J++){K[J]=L.rows.item(J)}F.apply(this,[K])},function(J,K){alert("Error:"+K.message)})});return D}function r(C,D){for(c in C){y({data:C[c],callback:D})}}function a(D){var C=D.data;z.transaction(function(E){E.executeSql("UPDATE CLIENT_DATA set name=?, age=?, dateHourOfBirth=?, sex=?, address=?, phone=?, email=? where id=?",[C.name,C.age,C.dateHourOfBirth,C.sex,C.address,C.phone,C.email,C.id],function(G,F){if(D.callback===f){return}D.callback.apply(this,["Data update in table"])},function(){console.log("error insert : "+C)})})}function m(E,D,C,F){if(C===f){C=[]}z.transaction(function(G){G.executeSql(x(E,D),C,function(I,H){if(F!==f){F.apply(this,[])}},function(H,I){alert("Error:"+I.message)})})}function y(D){var C=D.data;var E=D.callback;z.transaction(function(F){if(D.checkunique!==f&&D.checkunique===true){F.executeSql("SELECT * FROM CLIENT_DATA WHERE NAME=?  AND AGE=?AND DATEHOUROFBIRTH=?AND SEX=?AND ADDRESS=?AND PHONE=?AND EMAIL=?",[C.name,C.age,C.dateHourOfBirth,C.sex,C.address,C.phone,C.email],function(G){if(G.length<=0){F.executeSql(w.insertClientData,[C.name,C.age,C.dateHourOfBirth,C.sex,C.address,C.phone,C.email],function(I,H){console.log("success insert e : "+I);if(E===f){return}E.apply(this,[H.insertId,"Data Inserted in table"])},function(){console.log("error insert : "+C)})}},function(){console.log("error insert : "+C)})}else{F.executeSql(w.insertClientData,[C.name,C.age,C.dateHourOfBirth,C.sex,C.address,C.phone,C.email],function(H,G){if(E===f){return}E.apply(this,[G.insertId,"Data Inserted in table"])},function(){console.log("error insert : "+C)})}})}function h(C,G,E,F,D,H){z.transaction(function(I){I.executeSql(w.insertDiagnoseData,[C,G,E,F,D],function(){if(H===f){return}H.apply(this,["Data Inserted in table"])},function(J,K){console.log("error insert into diagnose : "+K.message)})})}return o}(jQuery);var FileModule=function(d,e){var b={initialize:c,readFile:a};function c(){}function a(f,g){fr=new FileReader();fr.onload=function(h){if(g===e){return}g.apply(this,[h.target.result])};fr.readAsText(f)}return b}(jQuery);var TabsModule=function(g){var r={buildTabSubTabData:c,getTabRoot:function(){return u},resetTabIndex:b,clearTabs:d,getAllTabSubtabData:t,getTabSubtabArray:function(){return p},getTabDetails:j,getTabSubtabDetails:v,getSubtabsIdArray:e,getPreviousSubtabsIdArray:function(){return w},removeTab:o,removeSubTab:q};var n=0,a,p=[],f={},s="diagnoseTab",h="diagnoseSubTab",u={type:"TabRoot",children:[]},y=[],w=[];function m(){return n++}function b(){n=0}function l(z){a=z}function x(){return a}function t(){w=y;y=[];var z="";u={type:"TabRoot",children:[]};g.each(p,function(D,C){var H=s+C.tabIndex;var G=C.tabName;var B={type:"Tabs",id:H,name:G,tabHierarchyHeadings:G,children:[]};if(C.subTabsArray.length>1){var F=C.subTabsArray;var E=null;var A=[];g.each(F,function(I,L){var J=L.subTabName;var K=s+L.tabIndex+h+L.subTabIndex;A.push({type:"Tabs",id:K,name:J,tabHierarchyHeadings:G+" : "+L.subTabName,children:[L.controls]})});B.children=A}else{B.children.push(C.subTabsArray[0].controls)}u.children.push(B)});return u}function e(){return y}function d(){p=[];f={}}function k(A){var z=null;angular.forEach(A.children[0].children,function(B,C){if(B.type==="Content"){z=B;return false}});return z}function c(O){var C=O.tabIndex,G=O.subTabIndex,F=O.fileName,E=O.fileContent,J=O.tabName,H=O.subTabName,M=O.jsonData,z=O.insertId,L=O.classify;var D=k(M);var B=s+C;var A=h+G;var N=F.replace(".json","");controlFileName=B+A+F;var K=f[C];if(K===undefined){K={};K.tabIndex=C;f[C]=K;p.push(K)}if(K.subTabsArray===undefined){K.subTabsArray=[];K.subTabIndexer={}}var I=K.subTabIndexer[G];if(I===undefined){I={};I.insertId=z;I.tabIndex=C;I.subTabIndex=G;K.subTabIndexer[G]=I;K.subTabsArray.push(I)}I.classify=L;I.jsonData=M;I.controls=D;I.fileName=F;I.subTabName=H;K.tabName=J}function o(z){f[z]=undefined;for(i=0;i<p.length;i++){if(p[i].tabIndex===z){p.splice(i,1)}}}function q(z,A){f[z].subTabIndexer[A]=undefined;for(i=0;i<p[z].subTabsArray.length;i++){if(p[z].subTabsArray[i].tabIndex===z){p[z].subTabsArray.splice(i,1)}}}function j(z){return f[z]}function v(z,A){return f[z].subTabIndexer[A]}return r}(jQuery);var diagnoseTabCount=0;var GridBuilder=function(c,e){var a={getGridClass:d,setGridControlLabels:b};function d(g,f){if(g===null){return}var j=0;var h="";var i=g.length;c.each(g,function(k,l){if(l.type==="Block"){if(l.properties!==e){switch(l.properties.subtype){case"a":h="solo";break;case"b":h="a";break;case"c":h="b";break;case"d":h="c";break;case"e":h="d";break}}else{h="solo"}}if(k>=i/f-1){return false}});return"ui-grid-"+h}function b(j){var k=j.children,n=j.properties.rows,l=j.properties.columns||2,h=[],o=[],g=0;for(var f=0;f<n;f++){for(var m=0;m<l;m++){var i=k[g];if(i.type==="Block"){if(m===0&&i.children!==e&&i.children[0].type==="Text"){o[f]=i.children[0].properties.text}else{if(f===0&&i.children!==e&&i.children[0].type==="Text"){h[m]=i.children[0].properties.text}else{if(f===0&&i.children===e){h[m]=""}else{if(m!==0&&i.children!==e){c.each(i.children,function(p,q){if(q.type==="SelectMenu"){q.properties.options.label=o[f]+(h[m]!==e?(" : "+h[m]):"")}})}}}}g++}}}}return a}(jQuery);var ClientTabFunctionality = function ($, undefined) {

  var self = {
    initialize: _initialize,
    putDiagnoseDetailsForClient: _putDiagnoseDetailsForClient,
    makeActive: _makeActive,
    resetTab: _resetTab,
    getHtmlFromDiagnoseList: _getHtmlFromDiagnoseList,
    updateDiagnoseList: _updateDiagnoseListOnUI,
    getSelectedClient: function () { return _selectedClientId; }
  };

  function _initialize() {

    _$clientSearchResults = $("#autocomplete");
    _$diagnoseTabHeader = $('#diagnoseTabHeader');
    _$mainTabs = $("#tabs");
    _$diagnoseId = $('#diagnose #diagnoseId');
    _$diagnoseIdForClient = $('#diagnose #diagnoseIdForClient');
    _$clientTabHeader = $('#clientTabHeader');
    _$newClientArea = $('#newClientArea');
    _$clientId = $('#client #clientId');

    _bindEvents();
  }

  var _$clientSearchResults = null,
      _$diagnoseTabHeader = null,
      _$mainTabs = null,
      _$diagnoseIdForClient = null,
      _$diagnoseId = null,
      _$clientTabHeader = null,
      _$clientId = null,
      _$newClientArea = null,
      _IsNewClient = false,
      _selectedClientId = "";

  function _bindEvents() {
    var clientFormSelectors = 'input[type="text"], input[type="number"], '
            + 'input[type="email"], input[type="datetime-local"], textarea';

    _$newClientArea.on('keyup', clientFormSelectors, function() {
      _onClientFormChange();
      $(this).addClass('js-control-value-changed');
    });

    _$newClientArea.on('change', 'select, input[type="datetime-local"]', function() {
      _onClientFormChange();
      $(this).addClass('js-control-value-changed');
    });

    $('#newClientButton').on('click', function () {
      $('#newClientArea').slideDown();
      $('#saveClientButton').show().addClass("ui-disabled js-disabled");
      $('#editClientButton').hide();

      _IsNewClient = true;

      _resetAndEnableClientForm();
    });

    $('#saveClientButton').on('click', function () {

      if ($(this).hasClass('js-disabled')) return;

      _saveClientDetailsButtonAction();
    });

    $('#editClientButton').on('click', function() {
      _enableDisableClientForm('enable');
      $('#saveClientButton').show().removeClass("ui-disabled js-disabled");
      $(this).hide();
    });

    $('#cancelChangesClientButton').on('click', function () {
      _$newClientArea.slideUp();
    });

    $('#clearSearchButton').on('click', function () {
      var $ulAutocomplete = $("#autocomplete");
      $ulAutocomplete.html('').listview("refresh").trigger("updatelayout");
    });

    $('#fetchAllButton').on('click', function () {
      _fetchClientData("");
      _selectedClientId = "";
    });

    _$clientSearchResults.on("filterablebeforefilter", function (e, data) {
      var $input = $(data.input);
      _fetchClientData($input.val());

      _selectedClientId = "";
    });

    _$clientSearchResults.on('click', '.js-add-new-diagnose-button', function () {
      _addNewDiagnoseForClient($(this).data('client-id'));
    });

    _$clientSearchResults.on('click', '.js-delete-client-button', function () {
      var $clientDetailsContainer = $(this).closest('.js-client-list-item')
      var clientId = $clientDetailsContainer.data("id");
      DataModule.execute("clientData", "deleteData", [clientId], function () {
        $clientDetailsContainer.slideUp(1000, function () { $(this).remove() });
        _resetAndEnableClientForm();
        _$newClientArea.slideUp();
      }, "delete");
    });

    _$clientSearchResults.on('click', '.js-edit-diagnose-button', function () {
      var $editDiagnoseButton = $(this);
      var $jsDiagnoseItemContainer = $editDiagnoseButton.closest('.js-diagnose-item-container');
      var clientId = $jsDiagnoseItemContainer.data('client-id');
      var diagnoseId = $jsDiagnoseItemContainer.data('diagnose-id');
      _$diagnoseId.val(diagnoseId);
      DiagnoseTabFunctionality.loadDiagnoseDataToHtml(clientId, diagnoseId);
      DataModule.execute("clientDiagnoseData", "selectDataWhereId", [diagnoseId], function (result) {
        _$diagnoseIdForClient.val(result.rows[0].diagnoseIdForClient);
      });
    });

    _$clientSearchResults.on('click', '.js-classify-diagnose-button', function () {
      var $diagnoseItemContainer =  $(this).closest('.js-diagnose-item-container');

      var clientId = $diagnoseItemContainer.data('client-id');
      var diagnoseId = $diagnoseItemContainer.data('diagnose-id');

      var diagnoseItems = $('#diagnoseList' + clientId + diagnoseId).data('diagnose-info');

      FunctionalityModule.getSharedData().diagnoseItems = diagnoseItems;

      var scope = angular.element($('#ClassificationListController')).scope();

      scope.$apply(function(){
        scope.data.diagnoseItems = diagnoseItems;
        scope.data.classlificationNames = FunctionalityModule.getAllClassificationName();

        // scope.$apply();

       // FunctionalityModule.enhancePage();
      });


      ClassifyTabFunctionality.editDiagnoseItemsCategory(clientId, diagnoseId, diagnoseItems);

      ClassifyTabFunctionality.makeActive();
    });

    _$clientSearchResults.on('click', '.js-delete-diagnose-button', function () {
      var $deleteDiagnoseButton = $(this);
      var $jsDiagnoseItemContainer = $deleteDiagnoseButton.closest('.js-diagnose-item-container');
      var clientId = $jsDiagnoseItemContainer.data('client-id');
      var diagnoseId = $jsDiagnoseItemContainer.data('diagnose-id');
      _deleteDiagnoseData(diagnoseId, $jsDiagnoseItemContainer)
    });

    _$clientSearchResults.on('click', '.js-edit-client-button', function () {
      var clientId = $(this).data('client-id');

      _IsNewClient = false;

      var rowIndex = $('#clientSearchItem' + clientId).data('row-index');
      _$newClientArea.slideDown('fast');

      var row = _$clientSearchResults.data("rows")[rowIndex];
      _setClientFormValues(row);

      _enableDisableClientForm('enable');
      $('#saveClientButton').show().addClass("ui-disabled js-disabled");
      $('#editClientButton').hide();

      $.mobile.silentScroll(0);
    });

    _$clientSearchResults.on('keyup', clientFormSelectors, function () {
      _onClientFormChange($(this).data('client-id'));
      $(this).addClass('js-control-value-changed');
    });

    _$clientSearchResults.on('change', 'select, input[type="datetime-local"]', function() {
      _onClientFormChange($(this).data('client-id'));
      $(this).addClass('js-control-value-changed');
    });

    _$clientSearchResults.on('click', '.js-add-appointment', function () {
      var clientId = $(this).data('client-id');
      _addAppointment(clientId);
    });

    _$clientSearchResults.on('click', '.js-edit-appointments', function () {
      var clientId = $(this).data('client-id');
      _editAppintments(clientId);
    });

    _$clientSearchResults.on('click', '.js-save-appointments', function () {
      var clientId = $(this).data('client-id');
      _saveAppointments(clientId);
    });
  }

  function _addAppointment(clientId, date, attended) {
    date = date || $('#appointmentDate' + clientId).val();
    attended = (attended || "false") === "false" ? false : true;

    if (date === "") return;

    DataModule.execute("clientAppointmentsData", "insertData", [clientId, date, attended], function (result) {

      var flipswitchHtml = '<input style="" class="js-appointment-status" type="checkbox" data-role="flipswitch" '
          + 'name="flip-checkbox-' + clientId + '" data-appointment-id="' + result.insertId
          + '" data-mini="true" data-on-text="Attended"'
          + (attended ? " checked " : "")
          + ' data-off-text="Not Attended" data-wrapper-class="custom-size-flipswitch" disabled="disabled">';

      var $listItem = $('<li> <span href="#" style="width: 60%; display: inline-block;">' + date + '</span> '
                      + flipswitchHtml + ' </li>');
      $('#appointmentsList' + clientId).append($listItem)
          .listview("refresh").trigger("updatelayout").find('li input').flipswitch();
      });
  }

  function _editAppintments(clientId) {

    if ($('#appointmentsList' + clientId + ' li').length <= 0) return;

    $('#editAppointmentsButton' + clientId).hide();

    $('.js-appointment-status[name="flip-checkbox-' + clientId + '"]').flipswitch('enable');
    $('#saveAppointmentsButton' + clientId).show();
  }

  function _saveAppointments(clientId) {
    $('.js-appointment-status[name="flip-checkbox-' + clientId + '"]').flipswitch('disable')
    .each(function (i, flipswitch) {
      var appointmentId = $(flipswitch).data('appointment-id');
      var attended = $(flipswitch).prop('checked');
      DataModule.execute("clientAppointmentsData", "updateData", [attended, appointmentId], function () {
      }, 'update');
    });
    $('#saveAppointmentsButton' + clientId).hide();
    $('#editAppointmentsButton' + clientId).show();
  }

  function _addAllAppointmentsForClient(clientId) {

    DataModule.execute("clientAppointmentsData", "selectDataWhere", [clientId], function (results) {

      if (results.rows === undefined) return;

      $.each(results.rows, function (i, appointment) {
        _addAppointment(clientId, appointment.date, appointment.attended);
      });
    });
  }

  function _saveClientDetailsButtonAction() {
    var clientId = $('#clientId').val();

    if (_IsNewClient === undefined || _IsNewClient === false) {
      _$newClientArea.slideUp();
      $('.js-control-value-changed').each(function (i, changedControl) {
        $('#' + $(changedControl).attr('id') + clientId)
            .html($(changedControl).val())
            .data('current-value');

        $(changedControl).removeClass('js-control-value-changed');
      });
    }

    _insertOrUpdateClientData({
      "id": clientId,
      "name": $('#clientNameInput').val(),
      "age": $('#clientAgeInput').val(),
      "dateHourOfBirth": $('#birthdateAndHourInput').val(),
      "sex": $('#clientGender').val(),
      "address": $('#clientAddressInput').val(),
      "phone": $('#clientPhoneInput').val(),
      "email": $('#clientEmailInput').val()
    }, function (newClientId) {
      $('#clientId').val(newClientId);
    });
    _enableDisableClientForm('disable');

    DataModule.execute("clientData", "selectDataWhere", [clientId],
                       function (result) {

      var rows = result.rows;

      _$clientSearchResults.data("rows", rows);
    });

    $('#saveClientButton').hide();
    $('#editClientButton').show();
  }

  function _deleteDiagnoseData (diagnoseId, $jsDiagnoseItemContainer) {
    DataModule.execute("diagnoseData", "selectDataWhere", [diagnoseId], function (results) {
      var diagnoseItems = results.rows;

      if (diagnoseItems !== undefined) {
        $.each(diagnoseItems, function (i, item) {
          DataModule.execute("diagnoseClassification", "deleteDataWhere", [item.id], function () {
          }, "delete");
        });
      }

      DataModule.execute("diagnoseData", "deleteData", [diagnoseId], function () {
        DataModule.execute("clientDiagnoseData", "deleteData", [diagnoseId], function () {
          $jsDiagnoseItemContainer.slideUp(1000, function () { $(this).remove() });
        }, "delete");
      }, "delete");
    });
  }

  function _makeActive() {
    _$mainTabs.tabs("option", "active", 0);
    $("#mainTabHeader", _$mainTabs).find('.ui-btn-active').removeClass('ui-btn-active');
    _$clientTabHeader.addClass('ui-btn-active').removeClass('ui-disabled');
  }

  function _makeInactive() {
    _$clientTabHeader.removeClass('ui-btn-active');
    _$clientTabHeader.addClass('ui-disabled');
  }

  function _resetTab() {
    _resetAndEnableClientForm();
    _$clientSearchResults.html('');
  }

  function _addNewDiagnoseForClient(cllientId) {

    DataModule.execute("clientDiagnoseData", "getCountWhere", [cllientId], function (result) {
      _$diagnoseIdForClient.val(result.rows[0]["COUNT(1)"] + 1);
    });

    DiagnoseTabFunctionality.makeActive();

    DiagnoseTabFunctionality.resetForm();

    DiagnoseTabFunctionality.setDiagnoseClientId(cllientId);
  }

  function _insertOrUpdateClientData(clientData, callback) {
    var clientId = clientData.id;
    if (clientId === "") {
      DataModule.insertClientData({
        "data": clientData,
        "callback": function(clientId, msg) {
          callback.apply(this, [clientId]);
        }
      });
    } else {
      DataModule.updateClientData({
        "data": clientData,
        "callback": function(id, msg) {
        }
      });
    }
  }

  function _enableDisableClientForm(enableOrDisable, clientId) {
    if (clientId === undefined) clientId = "";

    $('#clientNameInput' + clientId).textinput(enableOrDisable);
    $('#clientAgeInput' + clientId).textinput(enableOrDisable);
    $('#birthdateAndHourInput' + clientId).textinput(enableOrDisable);
    $('#clientGender' + clientId).selectmenu('refresh').selectmenu(enableOrDisable);
    $('#clientAddressInput' + clientId).textinput(enableOrDisable);
    $('#clientPhoneInput' + clientId).textinput(enableOrDisable);
    $('#clientEmailInput' + clientId).textinput(enableOrDisable);
  }

  function _onClientFormChange(clientId) {

    if (clientId === undefined) clientId = "";

    $('#saveClientButton' + clientId).removeClass("ui-disabled js-disabled");
  }

  function _resetAndEnableClientForm() {
    $('#clientId').val('');
    $('#clientNameInput').val('').textinput('enable');
    $('#clientAgeInput').val('').textinput('enable');
    $('#birthdateAndHourInput').val('').textinput('enable');
    $('#clientGender').val('').selectmenu('refresh').selectmenu('enable');
    $('#clientAddressInput').val('').textinput('enable');
    $('#clientPhoneInput').val('').textinput('enable');
    $('#clientEmailInput').val('').textinput('enable');
  }

  function _setClientFormValues(row) {
    $('#clientId').val(row.id).data('current-value', row.id);
    $('#clientNameInput').val(row.name).data('current-value', row.name);
    $('#clientAgeInput').val(row.age).data('current-value', row.age);
    $('#birthdateAndHourInput').val(row.dateHourOfBirth).data('current-value', row.dateHourOfBirth);
    $('#clientGender').val(row.sex).selectmenu('refresh').data('current-value', row.sex);
    $('#clientAddressInput').val(row.address).data('current-value', row.address);
    $('#clientPhoneInput').val(row.phone).data('current-value', row.phone);
    $('#clientEmailInput').val(row.email).data('current-value', row.email);
  }

  function _fetchClientData(clientId) {

    DataModule.getColumnData(["*"], clientId, function (rows) {

      _$clientSearchResults.html($.map(rows, function(r, i) {

        var panelHtml = getHtmlFromTemplate('#collapsiblePanelForClientTemplate', {
          "properties": {
            "heading": r.name,
            "clientId": r.id,
            "personalData" : [r]
          }
        });

        return '<li id="clientSearchItem' + r.id + '" class="js-client-list-item" data-id="' + r.id
              + '" data-row-index="' + i + '"> ' + panelHtml+ ' </li>';
      }).join(''));

      _$clientSearchResults.data("rows", rows).listview("refresh").trigger("updatelayout");

      _collapsiblePanelExpandEvent();

      $('#defaultPage').enhanceWithin();
    });
  }

  function _collapsiblePanelExpandEvent() {
    $('.js-client-details', _$clientSearchResults).data("details-populated", false).collapsible().collapsible({
        expand: function(event, ui) {

          var $clientCollapsible = $(this);
          $('li', _$clientSearchResults).not($clientCollapsible.closest('.js-client-list-item')).remove();
          var rowIndex = $clientCollapsible.closest('li.js-client-list-item').data('row-index');

          var row = _$clientSearchResults.data("rows")[rowIndex];

          if ($clientCollapsible.data("details-populated") === true)
            return;

          var clientId = $clientCollapsible.data("client-id");

          _selectedClientId = clientId;

          _appointmentsPanelExpandEvent(clientId);

          DataModule.execute("clientDiagnoseData", "selectDataWhere", [clientId], function (results) {

            var rows = results.rows;

            if (rows === undefined) return;

            var allPanelHtml = $.map(rows, function (row, i) {

              var panelHtml = _getDiagnosePanelHtml(row.id, /** diagnose Id from CLIENT_DIAGNOSE_DATA **/
                                                    row.diagnoseName, row.clientId)

              return panelHtml;
            }).join('');

            $clientCollapsible.data("details-populated", true).find('.js-diagnose-details').append(allPanelHtml);

            $.each(rows, function (i, row) {

              /*** This needs implementation **/

              DataModule.execute("diagnoseData", "selectDataWhere", [row.id], function (results) {
                var diagnoseItems = results.rows;

                if (diagnoseItems === undefined) return;

                $.each(diagnoseItems, function (i, item) {
                  item.diagnoseItemId = item.id;
                });

                var html = _getHtmlFromDiagnoseList(diagnoseItems);

                var $diagnoseList = $('#' + "diagnoseList" + clientId + row.id);
                $diagnoseList.data('diagnose-info', diagnoseItems).data('client-id', clientId);
                $diagnoseList.append(html).listview("refresh").trigger("updatelayout");

                var allDiagnoseItems = {};
                var classifications = {};

                var classificationData = FunctionalityModule.getSharedData().classificationData;

                _categorizeDiagnoseItems(clientId, row.id, diagnoseItems,
                                         allDiagnoseItems, classifications, classificationData);
              });
              $('#defaultPage').enhanceWithin();

            });
            $('#defaultPage').enhanceWithin();
          });
        }
      });
  }

  function _appointmentsPanelExpandEvent(clientId) {
    _addAllAppointmentsForClient(clientId);
  }

  function _putDiagnoseDetailsForClient(clientId, diagnoseId, diagnoseName, diagnoseItems, newDiagnose,
                                         allDiagnoseItems, classifications, Data) {

    var $diagnoseDetailsCollapsibleSet = $('.js-diagnose-details', $('.js-client-details[data-client-id="' + clientId + '"]'));
    if (newDiagnose == true) {

      var panelHtml = _getDiagnosePanelHtml(diagnoseId, diagnoseName, clientId)

      $diagnoseDetailsCollapsibleSet.append(panelHtml).collapsibleset().collapsibleset( "refresh" );
    }

    $("#" + "diagnoseList" + clientId + diagnoseId)
        .data('diagnose-info', diagnoseItems).data('client-id', clientId)
        .html('').append(_getHtmlFromDiagnoseList(diagnoseItems))
        .listview().listview("refresh").trigger("updatelayout");


    _categorizeDiagnoseItems(clientId, diagnoseId, diagnoseItems, allDiagnoseItems,
                               classifications, Data.sharedData.classificationData);

    FunctionalityModule.enhancePage();
  }

  function _categorizeDiagnoseItems(clientId, diagnoseId, diagnoseItems,
                                     allDiagnoseItems, classifications, classificationData) {

    if (allDiagnoseItems === undefined) {
      allDiagnoseItems = {};
    }
    if (classifications === undefined) {
      classifications = {};
    }

    $.each(diagnoseItems, function (i, item) {

      var diagnoseItemId = item.id || item.diagnoseItemId;

      allDiagnoseItems[diagnoseItemId] = {
        name: item.controlLabel  + ' : ' + item.controlValueLabel,
        categorised: false
      }

      var categorizationMap = {};
      var classificationDataCopy = angular.copy(classificationData);

      DataModule.execute("diagnoseClassification", "selectDataWhere", [diagnoseItemId], function (results) {

        var rows = results.rows;

        if (rows !== undefined) {

          $.each(rows, function (i, diagnoseClassificationRow) {

            var found = false;

            $.each(classificationData, function (i, classData) {
              if (classData.data.classificationInsertId === diagnoseClassificationRow.classificationId) {
                classificationDataCopy[i].data.value = true;
                found = true;
              }
            });

            if (found === false) {
              $.each(classificationData, function (i, classData) {
                updateCategoryInfoCopy(diagnoseClassificationRow.classificationId,
                                         classData.categorieschildren,
                                         classificationDataCopy[i].categorieschildren,
                                         categorizationMap[classData.data.name]);
              });
            }
          });

          for (classificationItem of classificationDataCopy) {

            if (classificationItem.data.value) {
              categorizationMap[classificationItem.data.name] = [];
              categorizationMap[classificationItem.data.name].push(classificationItem.data.name);
              constructCategorizationMap(categorizationMap[classificationItem.data.name],
                                         classificationItem.categorieschildren);

            }
          }
          allDiagnoseItems[diagnoseItemId].categorised = true;
          allDiagnoseItems[diagnoseItemId].categorizationMap = categorizationMap;
        }

        if (i === diagnoseItems.length - 1) {
          // console.log(categorizationMap);
          _updateDiagnoseListOnUI(clientId, diagnoseId, classifications, allDiagnoseItems)
        }
      });
    });
  }

  function constructCategorizationMap(categorizationInfo, classificationDataArray) {
    $.each(classificationDataArray, function (k, categoryDetails) {
      if (categoryDetails.data.value) {
        categorizationInfo.push(categoryDetails.data.name);
        if (categoryDetails.categorieschildren !== undefined) {
          constructCategorizationMap(categoryDetails.categorieschildren,
                                   categorizationInfo);
        }
      }
    });
  }

  /*
    Function: updateCategoryInfoCopy
      Updates data.values attribute from source Array (categoriesInfoArray)
          to destination array (categoriesInfoArrayCopy)
  */

  function updateCategoryInfoCopy(classificationId, categoriesInfoArray,
                                     categoriesInfoArrayCopy)
  {
    var found = false;
    $.each(categoriesInfoArray, function (k, categoryDetails) {
      if (categoryDetails.data.classificationInsertId === classificationId) {

        categoriesInfoArrayCopy[k].data.value = true;
        found = true;
        return false;
      } else {
        if (categoryDetails.categorieschildren !== undefined) {
          if (updateCategoryInfoCopy(classificationId, categoryDetails.categorieschildren,
                                     categoriesInfoArrayCopy[k].categorieschildren)) {
            found = true;
            return false;
          }
        }
      }
    });

    return found;
  }


  function _updateDiagnoseListOnUI(clientId, diagnoseId, classifiedInfo, allDiagnoseItems) {
    var classifiedLists = {};
    var classifiedListsHeader = {};

    for (itemKey in allDiagnoseItems) {

      var item = allDiagnoseItems[itemKey];

      for (category in item.categorizationMap) {
        var categorizationMapItem = allDiagnoseItems[itemKey].categorizationMap[category];

        var categorizationStr = categorizationMapItem.join(' : ');
        var listItemHtml = '<li  data-role="list-divider" style="font-weight:bold">'
                    + categorizationStr + '</li>';

        if (classifiedListsHeader[categorizationStr] === undefined) {
          classifiedListsHeader[categorizationStr] = listItemHtml;
        }

        if (classifiedLists[categorizationStr] === undefined) {
          classifiedLists[categorizationStr] = [];
        }
        classifiedLists[categorizationStr].push('<li>' + item.name + '</li>');
        item.categorized = true;
      }
    }

    var allHtml = "";
    for (classifiedItem in classifiedListsHeader) {
      allHtml += classifiedListsHeader[classifiedItem];
      allHtml += classifiedLists[classifiedItem].join('');
    }

    var $diagnoseList = $('#diagnoseList' + clientId + diagnoseId);

    $diagnoseList.html(allHtml);

    var unclassifiedHeaderAdded = false;
    $.each(allDiagnoseItems, function (key, item) {
      if (item.categorized === true) return;

      if (!unclassifiedHeaderAdded) {
        $diagnoseList.append('<li data-role="list-divider" style="font-weight: bold">Unclassified</li>');
        unclassifiedHeaderAdded = true;
      }
      $diagnoseList.append('<li>' + item.name + '</li>');
    });

    $diagnoseList.listview().listview("refresh").trigger("updatelayout");

    FunctionalityModule.enhancePage();
  }

  function _getDiagnosePanelHtml(diagnoseId, diagnoseName, clientId) {
    var panelHtml = getHtmlFromTemplate('#collapsiblePanelForClientDiagnoseTemplate',
                                        {   "properties": {
                                              "heading": diagnoseName,
                                              "clientId": clientId,
                                              "id": diagnoseId,
                                              "uniqueDiagnoseListId": "diagnoseList" + clientId + diagnoseId,
                                              "classes": FunctionalityModule.getClassificationCount() > 0 ?
                                                        "js-classify-diagnose-button":"js-classify-diagnose-button ui-disabled"
                                            }
                                          });
    return panelHtml;
  }

  function _getHtmlFromDiagnoseList(diagnoseItems) {

    return $.map(diagnoseItems, function (item, i) {
      var itemHtml = '<li data-diagnose-item-id="' + item.diagnoseItemId
                          + '" data-diagnose-id="' + item.diagnoseId + '">' + item.controlLabel + ' : '
                          + item.controlValueLabel + '</li>';
      return itemHtml;
    }).join("");
  }

  return self;
} (jQuery);
var DiagnoseTabFunctionality=function(h,i){var n={initialize:z,resetForm:x,makeActive:r,loadDiagnoseDataToHtml:u,fetchAndSetAllDiagnoseData:b,setDiagnoseClientId:s,clearDiagnoseTabs:c,addContainerToDiagnoseTabArea:o,saveDiagnoseData:g,setDataControls:function(C){t=C}};var k=null,q=null,v=true,y=null,A=null,p=null,w=null,l=null,d=null,a=false,f=0,t=null;function z(){k=h("#diagnoseTabArea");q=h("#defaultPage");w=h("#diagnoseId");l=h("#diagnoseIdForClient");A=h("#diagnoseTabHeader");y=h("#clientTabHeader");p=h("#tabs");d=h("#diagnose #clientId");b();B()}function B(){}function s(C){d.val(C)}function g(D){var C=d.val();if(C===""){alert("Please select a client first");return}var E="Diagnose: "+l.val()+", "+(new Date()).toLocaleString();if(v==false){DataModule.deleteDiagnoseData(C)}if(v==true){DataModule.execute("clientDiagnoseData","insertData",[C,l.val(),E,(new Date()).toDateString()],function(G){var H=G.insertId;m(C,H,E,v,D)})}else{var F=w.val();m(C,F,E,v,D)}ClientTabFunctionality.makeActive();j()}function m(C,J,G,F,E){var D=[];h.each(E.SelectedControls,function(K,L){D.push({toInsert:[J,K,L.label,L.type,L.valueLabel,L.value],diagnoseDetail:{diagnoseId:J,controlLabel:L.label,controlValueLabel:L.valueLabel,controlValue:L.value},categoriesInfo:L.categoriesInfo})});var I=[];h.each(D,function(L,K){I.push(K.toInsert)});var H={};H.tableReference="diagnoseData";H.queryReference="insertData";H.queryParametersArray=I;H.callback=function(P){if(P.length<D.length){return}var K=[];var O={};var M={};var N=[];h.each(D,function(Q,S){S.diagnoseDetail.diagnoseItemId=P[Q];K.push(S.diagnoseDetail);var R={};h.each(S.categoriesInfo,function(T,U){if(U.data.value){R[U.data.name]=[];R[U.data.name].push(U.data.name);N.push([S.diagnoseDetail.diagnoseItemId,U.data.classificationInsertId]);if(U.categorieschildren!==i){e(S.diagnoseDetail.diagnoseItemId,U.categorieschildren,N,R[U.data.name])}}});S.categorizationMap=R});var L={};L.tableReference="diagnoseClassification";L.queryReference="insertData";L.queryParametersArray=N;L.callback=function(Q){if(Q.length<N.length){return}ClientTabFunctionality.putDiagnoseDetailsForClient(C,J,G,K,F,O,M,E)};L.queryType="insert";DataModule.executeAll(L)};H.queryType="insert";DataModule.executeAll(H)}function e(D,F,E,C){h.each(F,function(G,H){if(H.data.value){C.push(H.data.name);E.push([D,H.data.classificationInsertId]);if(H.categorieschildren!==i){e(D,H.categorieschildren,E,C)}}})}function r(){p.tabs("option","active",1);h("#mainTabHeader",p).find(".ui-btn-active").removeClass("ui-btn-active");A.addClass("ui-btn-active").removeClass("ui-disabled")}function j(){A.removeClass("ui-btn-active");A.addClass("ui-disabled")}function x(){v=true;h("[data-save-control]").each(function(D,C){var E=h(C).attr("data-save-control");switch(E){case"Checkbox":case"checkbox":case"radio":h(":checked",h(C)).each(function(F,G){h(G).prop("checked",false)});break;case"toggleSwitch":h('input[type="checkbox"]',h(C)).each(function(F,G){h(G).prop("checked",false).flipswitch("refresh")});break;case"slider":h("input",h(C)).each(function(F,G){h(G).val(h(G).attr("data-default-value")).slider("refresh")});break;case"TextInput":h("input",h(C)).each(function(F,G){h(G).val("").textinput("refresh")});break;default:h("input",h(C)).each(function(F,G){h(G).val("")});break}});q.enhanceWithin()}function u(C,D){s(C);x();v=false;DataModule.execute("diagnoseData","selectDataWhere",[D],function(E){r();var F=E.rows;if(F===i){return}h.each(F,function(G,I){var H=h("#"+I.controlId);switch(I.controlType){case"toggleSwitch":H.prop("checked",I.controlValue==="on"?true:false).flipswitch("refresh");break;case"slider":H.val(I.controlValue).slider("refresh");break;case"Checkbox":case"checkbox":case"radio":H.prop("checked",I.controlValue).checkboxradio("refresh");break;default:H.val(I.controlValue);break}});q.enhanceWithin()})}function b(C){DataModule.execute("diagnoseControls","selectData",[],function(D){var E=D.rows;if(E===i){return}var F=-1;h.each(E,function(J,K){var I=K.id;var H={tabName:K.diagnoseName,subTabName:K.subTabName,tabIndex:K.tabIndex,subTabIndex:K.subTabIndex,insertId:K.id,fileName:K.diagnoseControlFile,fileContent:K.diagnoseControlFileContent,jsonData:JSON.parse(K.diagnoseControlFileContent),classify:K.classify==="true"?true:false};if(K.tabIndex>F){F=K.tabIndex}TabsModule.buildTabSubTabData(H)});o();AddDiagnoseFromJsonFunctionality.setDiagnoseTabConfigIndex(F);var G=TabsModule.getTabSubtabArray();if(C===i||C===true){h.each(G,function(I,H){AddDiagnoseFromJsonFunctionality.addDiagnoseTabConfig(H)})}})}function o(){var C=angular.element(h("#DiagnoseController")).scope();t.sharedData.controls=TabsModule.getAllTabSubtabData();C.$digest()}function c(){h("tabs, .categories-tabs",k).each(function(D,C){var E=h(C);var F=E.data("tabs-initialized");if(F==="true"){E.tabs("destroy");E.data("tabs-initialized","false")}});h("#ControlsContainer").html("")}return n}(jQuery);var ClassifyTabFunctionality=function(e,c){var n={initialize:f,makeActive:j,editDiagnoseItemsCategory:g};var d=null,h=null,l=null,k=null;function f(){d=e("#classificationTabHeader");h=e("#tabs");l=e("#classification");k=e("#classificationTabContent");_$editClassificationList=e("#editClassificationList");b()}function b(){e("#saveClassificationChanges").on("click",function(){m()})}function m(){var p={};var q={};var o="";var r="";e(".js-diagnose-list-item",_$editClassificationList).each(function(t,u){var x=e(u);o=x.data("client-id");r=x.data("diagnose-id");var s=x.data("diagnose-item-id");var w=x.data("diagnose-item-name");var v=e("#diagnoseList"+o+r).find('li[data-diagnose-item-id="'+s+'"]');q[s]={name:w,categorized:false};e(".js-diagnose-classification-item:checked",x).each(function(y,B){var A=e(B).data("class-id");var z=e(B).data("class-name");if(p[A]===c){p[A]={className:z,diagnoseItems:[]}}p[A].diagnoseItems.push({id:s,name:w})});DataModule.execute("diagnoseClassification","deleteDataWhere",[s],function(){e(".js-diagnose-classification-item:checked",x).each(function(y,A){var z=e(A).data("class-id");DataModule.execute("diagnoseClassification","insertData",[s,z],function(){})})},"delete")});ClientTabFunctionality.updateDiagnoseListOnUI(o,r,p,q);ClientTabFunctionality.makeActive();i()}function j(){h.tabs("option","active",2);e("#mainTabHeader",h).find(".ui-btn-active").removeClass("ui-btn-active");d.addClass("ui-btn-active").removeClass("ui-disabled")}function i(){d.removeClass("ui-btn-active").addClass("ui-disabled")}function g(o,r,p){e.each(p,function(s,t){t.id=t.diagnoseItemId});var q=a(o,p);_$editClassificationList.html("").append(q);e.each(p,function(s,t){DataModule.execute("diagnoseClassification","selectDataWhere",[t.id],function(u){var v=u.rows;if(v===c){return}e.each(v,function(w,y){var x=e('[data-diagnose-item-id="'+t.id+'"]');e(".js-diagnose-classification-item[data-class-id="+y.classificationId+"]",x).prop("checked",true);_$editClassificationList.find(".js-diagnose-list-item").collapsible().collapsible("refresh").trigger("updatelayout");_$editClassificationList.find(".js-diagnose-classification-item").checkboxradio().checkboxradio("refresh");FunctionalityModule.enhancePage()})})});_$editClassificationList.find(".js-diagnose-list-item").collapsible().collapsible("refresh").trigger("updatelayout");_$editClassificationList.find(".js-diagnose-classification-item").checkboxradio().checkboxradio("refresh");FunctionalityModule.enhancePage()}function a(o,p){return e.map(p,function(s,r){var q={properties:{heading:s.controlLabel+" : "+s.controlValueLabel,diagnoseId:s.diagnoseId,diagnoseItemId:s.id,clientId:o,children:FunctionalityModule.getAllClassificationName()}};var t=getHtmlFromTemplate("#collapsibleListItemInClientDiagnoseTemplate",q);return t}).join("")}return n}(jQuery);var ConfigTabFunctionality=function(d,e){var i={initialize:u,resetForm:t};function u(){s();p()}var k=null,j=null,c=null,m='<a class="js-delete-classification ui-shadow ui-btn ui-icon-delete ui-btn-inline" data-iconpos="right">Delete</a>';function s(){k=d("#diagnoseConfig");j=d("#allClassificationNames");c=d("#classificationName");AddDiagnoseFromJsonFunctionality.initialize();f()}function f(){DataModule.execute("classification","selectData",[],function(v){var w=v.rows;if(w===e){return}d.each(w,function(x,y){a(y.id,y.classificationName)});j.listview("refresh").trigger("updatelayout");FunctionalityModule.enhancePage()})}function p(){d(function(){d("#dropDBStructureButton").on("click",function(){DataModule.dropAllTables();t();ClientTabFunctionality.resetTab()});d("#loadTestClientDataButton").on("click",function(){DataModule.insertTestData(clientList,n)});d("#createDBButton").on("click",function(){DataModule.createAllTables(n)});d("#dbExportDataButton").on("click",function(){var v=q()})})}function a(w,v){FunctionalityModule.addClassificationName(w,v)}function r(x,w){if(w){x+=1462}var y=Date.parse(x);return(y-new Date(Date.UTC(1899,11,30)))/(24*60*60*1000)}function g(B,A){var w={};var x={s:{c:10000000,r:10000000},e:{c:0,r:0}};for(var z=0;z!=B.length;++z){for(var D=0;D!=B[z].length;++D){if(x.s.r>z){x.s.r=z}if(x.s.c>D){x.s.c=D}if(x.e.r<z){x.e.r=z}if(x.e.c<D){x.e.c=D}var v={v:B[z][D]};if(v.v==null){continue}var y=XLSX.utils.encode_cell({c:D,r:z});if(typeof v.v==="number"){v.t="n"}else{if(typeof v.v==="boolean"){v.t="b"}else{if(v.v instanceof Date){v.t="n";v.z=XLSX.SSF._table[14];v.v=r(v.v)}else{v.t="s"}}}w[y]=v}}if(x.s.c<10000000){w["!ref"]=XLSX.utils.encode_range(x)}return w}var h="Sheet";function o(){if(!(this instanceof o)){return new o()}this.SheetNames=[];this.Sheets={}}function l(y){var w=new ArrayBuffer(y.length);var v=new Uint8Array(w);for(var x=0;x!=y.length;++x){v[x]=y.charCodeAt(x)&255}return w}function q(){DataModule.execute("clientData","selectData",[],function(A){var F={"ClientData.csv":{data:"Client Id, Client Name\n",type:"text/csv"}};var x=new o();var w="ClientData.csv";var y=A.rows;var E={};var D={s:{c:10000000,r:10000000},e:{c:0,r:0}};for(var z=0;z!=y.length;++z){var v=0;d.each(y[z],function(G,I){if(D.s.r>z){D.s.r=z}if(D.s.c>v){D.s.c=v}if(D.e.r<z){D.e.r=z}if(D.e.c<v){D.e.c=v}var C={v:y[z][G]};if(C.v==null){return}var H=XLSX.utils.encode_cell({c:v,r:z});if(typeof C.v==="number"){C.t="n"}else{if(typeof C.v==="boolean"){C.t="b"}else{if(C.v instanceof Date){C.t="n";C.z=XLSX.SSF._table[14];C.v=r(C.v)}else{C.t="s"}}}E[H]=C;v++})}if(D.s.c<10000000){E["!ref"]=XLSX.utils.encode_range(D)}x.SheetNames.push(h);x.Sheets[h]=E;var B=XLSX.write(x,{bookType:"xlsx",bookSST:true,type:"binary"});saveAs(new Blob([l(B)],{type:"application/octet-stream"}),"ClientData.xlsx");return E})}function b(){DataModule.execute("clientData","selectData",[],function(A){var x={"ClientData.csv":{data:"Client Id, Client Name\n",type:"text/csv"}};var w="ClientData.csv";var z=",";d.each(A.rows,function(D,E){var F="";F+=E.id;F+=z;F+=E.name;F+=z;F+=E.age;F+=z;F+=E.dateHourOfBirth;F+=z;F+=E.sex;F+=z;F+=E.address.replace("\n","").replace(","," ");F+=z;F+=E.phone;F+=z;F+=E.email;F+="\n";x[w].data+=F});var y=new File([x[w].data],w,{type:x[w].type,lastModified:Date.now()});var v=URL.createObjectURL(y,{oneTimeOnly:true});var B=document.createElement("a");B.href=v;B.download=w;B.textContent=w;var C=document.createElement("li");C.appendChild(B);d("#dbSection #filesForDownload").append(C)})}function t(){d("ul",k).html("");j.html("")}function n(v){d("#configEventsMessages").show().find("ul").append('<li class="ui-icon-home">'+v+"</li>").listview("refresh").trigger("updatelayout");setTimeout(function(){d("#configEventsMessages").fadeOut(1000,function(){d(this).find("ul").html("")})},2000)}return i}(jQuery);var ClassifyTabFunctionality=function(e,c){var n={initialize:f,makeActive:j,editDiagnoseItemsCategory:g};var d=null,h=null,l=null,k=null;function f(){d=e("#classificationTabHeader");h=e("#tabs");l=e("#classification");k=e("#classificationTabContent");_$editClassificationList=e("#editClassificationList");b()}function b(){e("#saveClassificationChanges").on("click",function(){m()})}function m(){var p={};var q={};var o="";var r="";e(".js-diagnose-list-item",_$editClassificationList).each(function(t,u){var x=e(u);o=x.data("client-id");r=x.data("diagnose-id");var s=x.data("diagnose-item-id");var w=x.data("diagnose-item-name");var v=e("#diagnoseList"+o+r).find('li[data-diagnose-item-id="'+s+'"]');q[s]={name:w,categorized:false};e(".js-diagnose-classification-item:checked",x).each(function(y,B){var A=e(B).data("class-id");var z=e(B).data("class-name");if(p[A]===c){p[A]={className:z,diagnoseItems:[]}}p[A].diagnoseItems.push({id:s,name:w})});DataModule.execute("diagnoseClassification","deleteDataWhere",[s],function(){e(".js-diagnose-classification-item:checked",x).each(function(y,A){var z=e(A).data("class-id");DataModule.execute("diagnoseClassification","insertData",[s,z],function(){})})},"delete")});ClientTabFunctionality.updateDiagnoseListOnUI(o,r,p,q);ClientTabFunctionality.makeActive();i()}function j(){h.tabs("option","active",2);e("#mainTabHeader",h).find(".ui-btn-active").removeClass("ui-btn-active");d.addClass("ui-btn-active").removeClass("ui-disabled")}function i(){d.removeClass("ui-btn-active").addClass("ui-disabled")}function g(o,r,p){e.each(p,function(s,t){t.id=t.diagnoseItemId});var q=a(o,p);_$editClassificationList.html("").append(q);e.each(p,function(s,t){DataModule.execute("diagnoseClassification","selectDataWhere",[t.id],function(u){var v=u.rows;if(v===c){return}e.each(v,function(w,y){var x=e('[data-diagnose-item-id="'+t.id+'"]');e(".js-diagnose-classification-item[data-class-id="+y.classificationId+"]",x).prop("checked",true);_$editClassificationList.find(".js-diagnose-list-item").collapsible().collapsible("refresh").trigger("updatelayout");_$editClassificationList.find(".js-diagnose-classification-item").checkboxradio().checkboxradio("refresh");FunctionalityModule.enhancePage()})})});_$editClassificationList.find(".js-diagnose-list-item").collapsible().collapsible("refresh").trigger("updatelayout");_$editClassificationList.find(".js-diagnose-classification-item").checkboxradio().checkboxradio("refresh");FunctionalityModule.enhancePage()}function a(o,p){return e.map(p,function(s,r){var q={properties:{heading:s.controlLabel+" : "+s.controlValueLabel,diagnoseId:s.diagnoseId,diagnoseItemId:s.id,clientId:o,children:FunctionalityModule.getAllClassificationName()}};var t=getHtmlFromTemplate("#collapsibleListItemInClientDiagnoseTemplate",q);return t}).join("")}return n}(jQuery);var AddDiagnoseFromJsonFunctionality=function(e,b){var o={initialize:f,addDiagnoseTabConfig:n,setDataControls:function(q){h=q},setDiagnoseTabConfigIndex:function(q){l=q}};var g=null,l=-1,h=null,c=[];function f(){i();a()}function i(){g=e("#diagnoseConfig")}function a(){g.on("click",".js-save-button",function(){var s=e(this).closest(".js-new-diagnose-container");var r=s.data("diagnose-tab-config-index");var q=s.find(".js-diagnose-name").val();k(r,q)});g.on("change",".js-diagnose-file",function(u){var t=e(this);var r=t[0].files[0];if(r!==b){var w=t[0].files[0].name;var q=t.data("diagnose-tab-config-index");var s=t.data("diagnose-tab-subtabfile-index");var v='.js-diagnose-file-name[data-diagnose-tab-config-index="'+q+'"][data-diagnose-tab-subtabfile-index="'+s+'"]';if(e(v).val()===""){e(v).val(w.replace(".json",""))}}});g.on("click",".js-delete-button",function(){var s=ClientTabFunctionality.getSelectedClient();var r=e(this);var q=r.data("diagnose-tab-config-index");DataModule.execute("diagnoseControls","selectDataWhere",[q],function(t){var u=t.rows;if(u===b){return}e.each(u,function(v,w){DataModule.execute("diagnoseData","deleteDataWhere",["diagnoseTab"+w.tabIndex+"diagnoseSubTab"+w.subTabIndex],function(){})})});DataModule.executeQuery("DELETE FROM DIAGNOSE_CONTROLS_DATA WHERE tabIndex=?",[q],function(){r.closest(".js-tab-details-container").slideUp(1000,function(){e(this).remove()});if(s!==""){}TabsModule.removeTab(q);DiagnoseTabFunctionality.clearDiagnoseTabs();DiagnoseTabFunctionality.fetchAndSetAllDiagnoseData(false)})});g.on("click",".js-add-subtab-button",function(){var q=e(this).data("diagnose-tab-config-index");j(q)});e("#addDiagnoseTabButton").on("click",function(){n()})}function n(r){if(r===b){r={tabIndex:++l};var q=[{tabIndex:r.tabIndex,subTabIndex:0,isNewDiagnoseFile:true}];r.subTabsArray=q}else{l=r.tabIndex}if(c[r.tabIndex]===b){c[r.tabIndex]=[];e.each(r.subTabsArray,function(s,t){if(c[r.tabIndex].indexOf(t.subTabIndex)===-1){c[r.tabIndex].push(t.subTabIndex)}})}e("#diagnoseConfig ul").append(getHtmlFromTemplate("#configEntryItemTemplate",r));FunctionalityModule.enhancePage();e.each(r.subTabsArray,function(t,v){var s='[data-diagnose-tab-config-index="'+v.tabIndex+'"][data-diagnose-tab-subtabfile-index="'+v.subTabIndex+'"]';var u=".categorize-subtab-flipswitch"+s;e(u).prop("checked",v.classify).flipswitch("refresh")})}function j(r){e("#newDiagnoseContainer"+r).data("has-subtabs",true);var t=c[r];var q=Math.max.apply(null,t);q++;t.push(q);var s=getHtmlFromTemplate("#configEntryFileInputTemplate",{tabIndex:r,subTabIndex:q,isNewDiagnoseFile:true});e("#diagnoseControlsFilesContainer"+r).append(s);FunctionalityModule.enhancePage()}function k(r,q){e.each(c[r],function(s,t){p(r,q,t)})}function p(B,D,v){var C='[data-diagnose-tab-config-index="'+B+'"][data-diagnose-tab-subtabfile-index="'+v+'"]';var r='.js-diagnose-file[type="file"]'+C;var t=e(r)[0].files[0];var A=".categorize-subtab-flipswitch"+C;var z=e(A).prop("checked");var s=".js-subtab"+C;var y=e(s),q=y.data("insert-id");var q=y.data("insert-id");var u=".js-diagnose-file-name"+C;var w=e(u).val();var x=y.data("is-new-diagnose-file");if(q!==b&&q!==""&&t===b){m(B,v,D,w,z,q)}if(t===b){return}FileModule.readFile(t,function(E){if(x){DataModule.execute("diagnoseControls","insertData",[B,v,D,w,t.name,E,z],function(G){var F=G.insertId;y.data("insert-id",F);d({diagnoseSectionName:D,subTabName:w,tabIndex:B,insertId:F,subTabIndex:v,action:"insert",fileName:t.name,fileContent:E,classify:z})})}else{DataModule.execute("diagnoseControls","updateFileData",[B,v,D,w,t.name,E,z,q],function(F){d({diagnoseSectionName:D,subTabName:w,tabIndex:B,insertId:q,subTabIndex:v,action:"update",fileName:t.name,fileContent:E,classify:z})},"update")}});if(x===true){y.data("is-new-diagnose-file",false)}}function m(r,v,q,s,u,t){DataModule.execute("diagnoseControls","updateData",[q,s,u,t],function(){d({diagnoseSectionName:q,subTabName:s,tabIndex:r,subTabIndex:v,classify:u,action:"update"})},"update")}function d(D){var C=D.diagnoseSectionName,w=D.subTabName,r=D.tabIndex,t=D.action,q=D.insertId,v=D.subTabIndex,s=D.fileContent,u=D.fileName,A=D.classify,B=null;if(t==="update"){var z=TabsModule.getTabDetails(r);var y=TabsModule.getTabSubtabDetails(r,v);z.tabName=C;if(u!==b&&u!==""){y.fileName=u}else{if(u===b||u===""){u=y.fileName}}if(s===b){B=y.jsonData}else{B=JSON.parse(s);y.jsonData=B}}if(t==="insert"){if(s!==b){B=JSON.parse(s)}}var x={tabName:C,subTabName:w,tabIndex:r,subTabIndex:v,insertId:q,fileName:u,fileContent:s,jsonData:B,classify:A};TabsModule.buildTabSubTabData(x);DiagnoseTabFunctionality.clearDiagnoseTabs();DiagnoseTabFunctionality.addContainerToDiagnoseTabArea()}return o}(jQuery);
var FunctionalityModule = function ($, ClientTabFunctionality, DataModule, FileModule, TabsModule, undefined) {
  var self = {
    initialize: _initialize,
    enhancePage: _enhancePage,
    addClassificationName: _addClassificationName,
    getClassificationNameAt: _getClassificationNameAt,
    getAllClassificationName: _getAllClassificationName,
    getClassificationCount: _getClassificationCount,
    getClassificationAtId: _getClassificationAtId,
    getSharedData: function () { return _sharedData; },
    setSharedData: function (s) { _sharedData = s; },
  };

  var _$classificationTabs = null,
      _$diagnoseConfig = null,
      _$defaultPage = null,
      _classificationTabsHtml = null,
      _tabTemplate = "<li><a href='#{href}'>#{label}</a></li>",
      _classificationTabCounter = 0,
      _classificationNames = [],
      _classificationIndexer = {},
      _sharedData = null;


  function _initialize() {

    $.each(tabsControls.children, function(i, tabControl) {
      if ($('[href="#' + tabControl.properties.id + '"]').length <= 0) {
        tabControlsToAdd.children.push(tabControl);
      }
    });

    $('#tabs [data-role="navbar"] ul').append(getHtmlFromTemplate("#tabItemTemplate",
                                                                  tabControlsToAdd.children));

    $mainTabContainer = $('#diagnoseTabArea');

    $('#defaultPage').enhanceWithin();
    $('#tabs').tabs();

    _$defaultPage = $('#defaultPage');
    _$classificationTabs = $("#classificationTabs");

    _classificationTabsHtml = _$classificationTabs.html();
    _classificationTabCounter = _$classificationTabs.find("#tabHeader li").length;
    _$classificationTabs.tabs();

    ClientTabFunctionality.initialize();
    ClassifyTabFunctionality.initialize();
    DiagnoseTabFunctionality.initialize();
    ConfigTabFunctionality.initialize();

    _bindUIEvents();
  }

  function _enhancePage() {
    if (_$defaultPage === null) return;
    _$defaultPage.enhanceWithin();
  }

  // addTab function: adds new tab
  function addTab(tabTitle) {
    _$classificationTabs.tabs("destroy");
    _$classificationTabs.html(_classificationTabsHtml);

    var label = tabTitle || "Tab " + _classificationTabCounter,
      id = "tabs-" + _classificationTabCounter,
      li = $( _tabTemplate.replace( /#\{href\}/g, "#" + id ).replace( /#\{label\}/g, label ) ),
      tabContentHtml = "<ul id='" + id + "' class='tablist-content' data-role='listview' data-inset='true'>No diagnose items in " + label + "</li>";

    _$classificationTabs.find( ".ui-tabs-nav" ).append( li );
    _$classificationTabs.append(tabContentHtml);
    _classificationTabsHtml = _$classificationTabs.html();
    _$classificationTabs.tabs().tabs("refresh").tabs("option", "active", _classificationTabCounter);;
    _classificationTabCounter++;
  }

  function _bindUIEvents() {

    $('#diagnoseTabArea').on('change', 'input', function () {
      var clientId = $('#clientId').val();
      if (clientId !== "") {
        $('#saveDiagnoseChanges').removeClass('ui-disabled');
      }
    });
  }

  function _loadDiagnoseList(clientId, callback) {
    DataModule.getDiagnoseList(clientId, callback);
  }

  function _addClassificationName(id, classificationName) {

    var classification = {
      "id" : id,
      "name" : classificationName
    };
    _classificationNames.push(classification);
    _classificationIndexer[id] = classification;
  }

  function _getClassificationNameAt(index) {
    return _classificationNames[index];
  }

  function _getClassificationAtId(id) {
    var classData = _traverseClassificationData(_sharedData.classificationData, id);

    if (classData === null) return null;

    return classData.data;
  }

  function _traverseClassificationData(classificationData, id) {
    var classDetailsReturn = null;
    for (classDetails of classificationData) {
      if (classDetails.data.classificationInsertId === id) {
        classDetailsReturn = classDetails;
        break;
      }

      if (classDetails.categorieschildren !== undefined) {
        classDetailsReturn = _traverseClassificationData(classDetails.categorieschildren, id);
        if (classDetailsReturn !== null) {
          break;
        }
      }
    };
    return classDetailsReturn;
  }

  function _getAllClassificationName() {
    return _classificationNames;
  }

  function _getClassificationCount() {
    return _classificationNames.length;
  }

  return self;

} (jQuery, ClientTabFunctionality, DataModule, FileModule, TabsModule);

var controlFileName="";var templateItemCount=0;var firstId="";var toggleSwitchCounter=0;var idManager={};$.addTemplateFormatter({logValue:function(b,a){console.log(b);return b},prependChars:function(b,a){if(b===undefined){return}return a+b},controlType:function(b,a){switch(b){case"TextInput":return"text";case"datetime-local":return"datetime-local";default:return"text"}},getUniqueProperty:function(d,c){var a=controlFileName.split("/");var b=a[a.length-1];b=b.replace(".","");if(d===undefined&&c==="toggleSwitch"){toggleSwitchCounter++;for(i=toggleSwitchCounter;i<200;i++){if($("#"+b+c+i).length<=0){toggleSwitchCounter=i;break}}d=c+toggleSwitchCounter}else{if(d===undefined){if(idManager[c]===undefined){idManager[c]=0}else{idManager[c]+=1}for(i=idManager[c];i<200;i++){if($("#"+b+c+i).length<=0){idManager[c]=i;break}}d=c+idManager[c]}}return b+d},getFirstName:function(a){if(templateItemCount===0){firstId=a}templateItemCount++;return firstId}});var defaultTabsControls={children:[{type:"tab",properties:{heading:"Diagnose",id:"diagnose",appendToId:"diagnoseTabArea"},controlsFiles:[],tabType:"diagnose",convertAccordionToTab:false}]};function getHtmlFromTemplate(a,c){if(a===""){return""}$("#htmlContent").loadTemplate(a,c,{ignoreUndefined:true,ignoreNull:true,ignoreEmptyString:true});var b=$("#htmlContent").html();$("#htmlContent").html("");templateItemCount=0;return b}function getTemplateFromType(b){var a;switch(b){case"Button":a="#buttonTmpl";break;case"List":a="#listViewTemplate";break;case"ListItem":a="#listItemTemplate";break;case"SelectMenu":a="#dropdownTemplate";break;case"Collapsible":a="#collapsiblePanelTemplate";break;case"TextInput":case"datetime-local":a="#inputTemplate";break;case"Div":a="#divTemplate";break;case"Accordion":a="#tabTemplate";break;case"RadioGroup":case"CheckboxGroup":case"Checkbox":case"RadioButton":case"Slider":case"ToggleSwitch":case"Text":case"Grid":case"Block":a="#"+b+"Template";break;default:return""}return a}var textControlText="";var tabsControls=defaultTabsControls;var tabControlsToAdd={};tabControlsToAdd.children=[];$(function(){FunctionalityModule&&FunctionalityModule.initialize()});DataModule.initialize();DataModule.createAllTables();
